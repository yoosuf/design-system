@use "sass:color"; // SCSS built-in color functions
@use "sass:meta";
@use "sass:math";
@use "../semantics/colors" as *;
@use "../primitives/colors" as *;

/// Advanced Button State Mixin
@mixin button-state(
  $base-color: $semantic-primary, 
  $hover-variation: 8%, 
  $active-variation: 12%, 
  $variation-type: darken,
  $state-type: default,
  $percentage: null
) {
  // Comprehensive color manipulation functions
  $color-funcs: (
    "darken": color.darken,
    "lighten": color.lighten,
    "saturate": color.saturate,
    "desaturate": color.desaturate,
    "adjust-hue": color.adjust-hue,
    "scale": color.scale
  );

  // Get the color manipulation function
  $hover-func: map-get($color-funcs, $variation-type) or color.darken;
  $active-func: $hover-func;

  // Fallback color handling
  $fallback-color: if(
    meta.type-of($base-color) == color or 
    meta.type-of($base-color) == string, 
    $base-color, 
    #6200EE  // Material Design primary color as ultimate fallback
  );

  // Ensure a manipulatable color
  $color-value: if(
    meta.type-of($base-color) == color, 
    $base-color, 
    #6200EE  // Fallback to a solid color for color functions
  );

  // Variation value calculation with flexible percentage handling
  $hover-variation-value: if(
    $percentage != null, 
    $percentage, 
    if(
      meta.type-of($hover-variation) == number and math.is-unitless($hover-variation),
      $hover-variation * 1%,
      $hover-variation
    )
  );

  $active-variation-value: if(
    $percentage != null, 
    $percentage, 
    if(
      meta.type-of($active-variation) == number and math.is-unitless($active-variation),
      $active-variation * 1%,
      $active-variation
    )
  );

  // State-specific styling
  @if $state-type == default {
    // Hover state
    &:hover {
      background-color: $hover-func($color-value, $hover-variation-value);
      transition: all 0.3s ease;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    // Focus state with enhanced accessibility
    &:focus {
      outline: 2px solid color.scale($color-value, $alpha: -50%);
      outline-offset: 2px;
      box-shadow: 
        0 0 0 4px color.scale($color-value, $alpha: -70%),
        0 2px 4px rgba(0, 0, 0, 0.1);
      transition: all 0.2s ease;
    }

    // Active state
    &:active {
      background-color: $active-func($color-value, $active-variation-value);
      transition: all 0.2s ease;
      box-shadow: 
        0 1px 2px rgba(0, 0, 0, 0.05),
        inset 0 1px 3px rgba(0, 0, 0, 0.1);
      transform: translateY(1px);
    }
  } 
  // Outline button state variant
  @else if $state-type == outline {
    // Hover state for outline buttons
    &:hover {
      background-color: $hover-func($color-value, $hover-variation-value);
      color: color.scale($color-value, $lightness: 100%);
      transition: all 0.3s ease;
    }

    // Focus state for outline buttons
    &:focus {
      outline: 2px solid color.scale($color-value, $alpha: -50%);
      outline-offset: 2px;
      box-shadow: 
        0 0 0 4px color.scale($color-value, $alpha: -70%),
        0 2px 4px rgba(0, 0, 0, 0.1);
      transition: all 0.2s ease;
    }
    
    // Active state for outline buttons
    &:active {
      background-color: $active-func($color-value, $active-variation-value);
      color: color.scale($color-value, $lightness: 100%);
      transition: all 0.2s ease;
      box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
    }
  }
}

/// Shorthand for outline button states
@mixin outline-button-state(
  $base-color: $semantic-primary, 
  $hover-variation: 8%, 
  $active-variation: 12%,
  $variation-type: lighten,
  $percentage: null
) {
  @include button-state(
    $base-color, 
    $hover-variation, 
    $active-variation, 
    $variation-type, 
    outline,
    $percentage
  );
}
